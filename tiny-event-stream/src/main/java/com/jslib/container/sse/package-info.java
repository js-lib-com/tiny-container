/**
 * Event stream format is that described by W3C Server-Sent Events, section 6. For your convenience below is a simplified grammar
 * description. Now is worth to note that <code>event</code> field value should be a valid event type name; accordingly DOM Events 
 * specs event type name has the same syntax as a XML name. This is important because a Java class name qualifies and can be used as
 * <code>event</code> field value.  
 * <pre>
 *  event-stream = *event
 *  event = *field CRLF
 *  field = name ":" value CRLF
 *  name = "event" / "data" / "id" /  "retry"
 * </pre>
 * This library implementation imposes couple constrains as described by below grammar. As a consequence, this library event reader is
 * not able to parse 3pty events streams; this is by design, in order to ensure consistent data on client side. Anyway, a 3pty source 
 * event, that is, event stream client is able to read events generated by this library server side logic, provided is willing to parse
 * JSON formatted <code>data</code> field value. 
 * <pre>
 *  event-stream = *event
 *  event = event-field data-field [retry-field] CRLF
 *  event-field = "event" ":" &lt; event qualified class name &gt; CRLF
 *  data-field = "data" ":" &lt; json encoded event instance &gt; CRLF
 *  retry-field = "retry" ":" &lt; retry timeout in milliseconds &gt; CRLF
 * </pre>
 * Here are listed this library constrains compared with W3C grammar:
 * <table summary="Grammar Constraints">
 * <tr>
 * <td><code>event</code> field cannot be empty, always contains event class
 * <td>if <code>event</code> is empty uses <code>Message</code> class
 * <tr>
 * <td><code>data</code> field value is encoded JSON
 * <td><code>data</code> field value is plain text
 * <tr>
 * <td><code>event</code> is always before <code>data</code> and <code>retry</code> last
 * <td>a particular fields order is not mandatory
 * <tr>
 * <td>if field name is not recognized throw exception
 * <td>ignore field if name is not recognized
 * <tr>
 * <td><code>id</code> field is not processed and throw exception
 * <td>uses <code>id</code> to set <code>Last-Event-ID</code> on reconnect
 * </table>
 * 
 * <h4>JavaScript W3C EventSource Client</h4>
 * In order to listen for a event of a particular class just user that class qualified name as first argument for <code>addEventListener</code>. 
 * <pre>
 *  var eventSource = new EventSource("http://hub.bbnet.ro/test.event");
 *  eventSource.addEventListener("Alert", function(ev) {
 *      message.innerHTML = "hub alert: " + ev.data;
 *  });
 * </pre>
 * @author Iulian Rotaru
 */
package com.jslib.container.sse;

